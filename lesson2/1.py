"""
1. Написать программу, которая будет складывать, вычитать, умножать или делить два числа.
Числа и знак операции вводятся пользователем. После выполнения вычисления программа не должна завершаться,
а должна запрашивать новые данные для вычислений. Завершение программы должно выполняться при вводе символа '0' в
качестве знака операции. Если пользователь вводит неверный знак (не '0', '+', '-', '*', '/'), то программа должна
сообщать ему об ошибке и снова запрашивать знак операции. Также сообщать пользователю о невозможности деления на ноль,
 если он ввел 0 в качестве делителя.
"""
def calculator():
    print('Программа калькулятор\nВедите числа и матеметическое действие: (+,-,*,/) в одну строку без пробелов\nДля выхода из программы введите: 0')
    while True:

        data = input('Ввод: ')
                                    # Проверка на наличия знака в строке
        if data[data.find('+')] == '+':
            n = '+'
        elif data[data.find('-')] == '-':
            n = '-'
        elif data[data.find('*')] == '*':
            n = '*'
        elif data[data.find('/')] == '/':
            n = '/'
        elif data == '0':
            print('End')
            break
        else:
            print('Операция не обнаружена!\nВедите числа и матеметическое действие (+,-,*,/) в одну строку без пробелов\nДля выхода из программы введите: 0')
            continue

                                    # Сборка списка в нужной последовательноси
        data = data.split(n)
        data = [data[0], n, data[1]]
                                    # по ходу можно было и без этого обойтись
        for thing in [data]:
            match thing:
                case x, y, z:
                   operation = y
                case _:
                    print('stop')
                                    # выполнение операций
        if operation == '+':
            print(int(data[0]) + int(data[2]))
        elif operation == '-':
            print(int(data[0]) - int(data[2]))
        elif operation == '*':
            print(int(data[0]) * int(data[2]))
        elif operation == '/' and int(data[2]) != 0:
            print(int(data[0]) / int(data[2]))
        else:
            print('Деление на 0 запрещено!')

calculator()

""" 2. Посчитать четные и нечетные цифры введенного натурального числа. Например, если введено число 34560, 
    то у него 3 четные цифры (4, 6 и 0) и 2 нечетные (3 и 5).
"""

a = int(input('Введите натуральное число: '))
n = 0
s = 0
for i in str(a):
    if int(i) % 2 == 0:
        n += 1
    else:
        s += 1
print(f'в числе {a} четных чисел {n} нечетных чисел {s}')

""" 3. Сформировать из введенного числа обратное по порядку входящих в него цифр и вывести на экран. 
    Например, если введено число 3486, то надо вывести число 6843."""

a = 34213423
print(int(str(a)[::-1]))

"""
4. Найти сумму n элементов следующего ряда чисел: 1 -0.5 0.25 -0.125 ...Количество элементов (n) вводится с клавиатуры."""

a = [1, -0.5, 0.25, -0.125]
n = 2  # Количество элементов (n) вводится с клавиатуры
result = 0
for i in a[:n]:
    result += i
print(result)

""" 5. Вывести на экран коды и символы таблицы ASCII, начиная с символа под номером 32 и заканчивая 127-м включительно. 
    Вывод выполнить в табличной форме: по десять пар "код-символ" в каждой строке."""


for i in range(32, 128):
    if i % 10 == 0:
        print()
    print(f'{i} - "{chr(i)}', end='\t')

# list = [(i, chr(i)) for i in range(32, 128)]

"""
6. В программе генерируется случайное целое число от 0 до 100. Пользователь должен его отгадать не более чем за 10 попыток.
 После каждой неудачной попытки должно сообщаться больше или меньше введенное пользователем число, чем то, что загадано. 
 Если за 10 попыток число не отгадано, то вывести загаданное число.
"""

import random
number = random.randrange(100)
print('Отгадай число!')
n = 1
while n != 10:
    try:
        print(f'У Вас 10 попыток: попытка {n}')
        otv = int(input('Ваше число: '))

        if otv < number:
            print('Загаданное число больше!')
        elif otv > number:
            print('Загаданное число меньше!')
        else:
            print(f'Число отгадано верно!\nEnd')
            break
        # n += 1
    except ValueError:
        print('Это не число. Вы профукали одну попытку!!!')
    print(f'Вы проиграли! загаданное число {number}')
    n += 1



""" 7. Напишите программу, доказывающую или проверяющую, что для множества натуральных чисел 
    выполняется равенство: 1+2+...+n = n(n+1)/2, где n - любое натуральное число."""

# nambers = [1, 2, 3, 4, 5]
#
# a = (sum(nambers))
# n = 5
# if a + n == n * (n+1)/2:
#     print('верно')
# else:
#     print('неверно')

# НЕ ПОНЯЛ ЧТО ВООБЩЕ ТРЕБУЕТСЯ



""" 8. Посчитать, сколько раз встречается определенная цифра в введенной последовательности чисел. 
    Количество вводимых чисел и цифра, которую необходимо посчитать, задаются вводом с клавиатуры."""

a = input('Введите последовательно через пробел числа: ').split()
n = input('Укажите какой цифру ищем в набранной последовательности: ')

for i in a:
    s = str(i).count(n)
    print(f'в числе {i} цифра {n} встречается {s} количество раз')




""" 9. Среди натуральных чисел, которые были введены, найти наибольшее по сумме цифр. 
    Вывести на экран это число и сумму его цифр."""


a = input('Введите последовательно через пробел числа: ').split()
result = []
for el in a:
    result_sum = 0
    for i in el:
        result_sum = result_sum + int(i)
    result.append(result_sum)
print(max(result))





